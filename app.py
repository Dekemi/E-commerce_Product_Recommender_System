# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gh3GF8oGZpdt0Uvp9lYOKXUIbo8jDaVF
"""

# app.py


!pip install joblib
import streamlit as st
import joblib
import pandas as pd # To get product descriptions

# --- Load saved objects ---
@st.cache_data
def load_data():
    model = joblib.load('knn_model.joblib')
    matrix = joblib.load('sparse_matrix.joblib')
    mapper = joblib.load('item_mapper.joblib')

    # Load original data for product descriptions
    df_desc = pd.read_excel("Online Retail.xlsx")
    df_desc = df_desc[['StockCode', 'Description']].drop_duplicates().set_index('StockCode')

    return model, matrix, mapper, df_desc

model, matrix_sparse, item_mapper, df_desc = load_data()

# Reverse mapper from stock_code to index
stock_to_idx = {v: k for k, v in item_mapper.items()}

# --- Recommendation Function (copied from training script) ---
def get_recommendations(stock_code, model, n_recommendations=5):
    try:
        item_idx = stock_to_idx[stock_code]
    except KeyError:
        return []

    distances, indices = model.kneighbors(matrix_sparse.T[item_idx], n_neighbors=n_recommendations+1)
    similar_items_indices = indices.squeeze()[1:]
    recommendations = [item_mapper[i] for i in similar_items_indices]
    return recommendations

# --- Streamlit Web App Interface ---
st.title("ðŸ›’ E-commerce Product Recommender")
st.write("Select a product to see similar items that other customers bought.")

# Create a dropdown menu with product descriptions
product_list = list(df_desc.index)
selected_stock_code = st.selectbox(
    "Choose a Product",
    options=product_list,
    format_func=lambda x: f"{x} - {df_desc.loc[x, 'Description']}"
)

if selected_stock_code:
    st.subheader(f"Customers who bought '{df_desc.loc[selected_stock_code, 'Description']}' also bought:")

    recs = get_recommendations(selected_stock_code, model)

    if recs:
        for rec_code in recs:
            try:
                rec_desc = df_desc.loc[rec_code, 'Description']
                st.write(f"- **{rec_code}**: {rec_desc}")
            except KeyError:
                st.write(f"- **{rec_code}**: (Description not available)")
    else:
        st.write("Could not find recommendations for this item.")
